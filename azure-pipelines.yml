# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: 
- master
pr: none


pool:
  vmImage: 'ubuntu-latest'

variables:
  system.debug: 'true'
  skipComponentGovernanceDetection: 'true'

stages:
- stage: build
  jobs:
  - job: build_result
    displayName: Build Vote Result Service
    pool:
      vmImage: 'Ubuntu-latest'
    steps:
    - script: |          
        cd result
        npm install
        npm prune --production
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/result'
        artifact: 'VoteResultService'
        publishLocation: 'pipeline'  

# - stage: Infra
#   dependsOn: build
#   displayName: Create/Update Infra
#   jobs:    
#   - job: deployVM
#     displayName: Create Or Update VM    
#     steps:
#     - script: |
#         pwd
#         echo $(System.DefaultWorkingDirectory)
#         ls -ltrh
#     - task: AzureResourceGroupDeployment@2
#       displayName: 'Azure Deployment:Create Or Update Resource Group action'
#       inputs:
#         azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
#         action: 'Create Or Update Resource Group'
#         resourceGroupName: 'ForresterDemo'
#         location: 'East US 2'
#         templateLocation: 'Linked artifact'
#         csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/linux-vm2.json'
#         overrideParameters: '-vmName "raivmdemo1" -adminUsername "moala" -adminPasswordOrKey "$(vmPassword)"'
#         deploymentMode: 'Incremental'


- stage: deploy
  dependsOn: build
  jobs:
  - deployment: DeployVoteResultService
    displayName: Deploy Vote Result Service
    pool:
      vmImage: 'Ubuntu-latest'    
    environment:
      name:  Production
      resourceType: VirtualMachine
      tags: prod 
    strategy:
      rolling:
        maxParallel: 1
        preDeploy:
          steps:
          - download: current
            artifact: VoteResultService
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
#          - script: |
#              ps -ef | grep index.js | grep -v grep | awk '{print $2}' | xargs kill
#              rm -rf NodePlayerService              
#              echo COPYING APPLICATION CODE...
#              mv /home/moala/azagent/_work/1/NodePlayerService .       
#              cd NodePlayerService
#              echo STARTING THE SERVICE...
#              nohup node server.js >> logs_voteresultservice.txt &
          - script: |     
              cd result
              echo STARTING THE SERVICE...
              node server.js >> logs_voteresultservice.txt &
        on:
          failure:
            steps:
            - script: echo deployment failed. Run rollback scripts...
          success:
            steps:
            - script: echo deployment successful. Cleaning up...



# - stage: dev
#   dependsOn: build
#   displayName: Dev stage
#   jobs:    
#   - job: deployVM
#     displayName: createOrUpdateVM    
#     steps:
#     - script: |
#         pwd
#         echo $(System.DefaultWorkingDirectory)
#         ls -ltrh
#     - task: AzureResourceGroupDeployment@2
#       displayName: 'Azure Deployment:Create Or Update Resource Group action'
#       inputs:
#         azureSubscription: 'RMPM (afc11291-9826-46be-b852-70349146ddf8)'
#         action: 'Create Or Update Resource Group'
#         resourceGroupName: 'ForresterDemo'
#         location: 'East US 2'
#         templateLocation: 'Linked artifact'
#         csmFile: '$(System.DefaultWorkingDirectory)/arm-templates/linux-vm2.json'
#         overrideParameters: '-vmName "raivmdemo1" -adminUsername "moala" -adminPasswordOrKey "$(vmPassword)"'
#         deploymentMode: 'Incremental'
# 


      